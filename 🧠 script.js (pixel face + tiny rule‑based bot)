const log = document.getElementById('log');
const input = document.getElementById('input');
const sendBtn = document.getElementById('send');
const canvas = document.getElementById('avatar');
const ctx = canvas.getContext('2d');
const stateEl = document.getElementById('state');

// ────────────── UI helpers ──────────────
function addMsg(text, who){
  const div = document.createElement('div');
  div.className = 'msg ' + (who==='user'?'user':'bot');
  div.textContent = text;
  log.appendChild(div);
  log.scrollTop = log.scrollHeight;
}

async function send(){
  const text = input.value.trim();
  if(!text) return;
  setState('listening');
  addMsg(text, 'user');
  input.value = '';
  sendBtn.disabled = true;

  // fake thinking delay for demo feel
  setState('thinking');
  await sleep(400 + Math.random()*400);
  const reply = botReply(text);
  setState('speaking');
  addMsg(reply, 'bot');
  setTimeout(()=> setState('idle'), 1000);
  sendBtn.disabled = false;
  input.focus();
}

sendBtn.addEventListener('click', send);
input.addEventListener('keydown', (e)=>{
  if(e.key==='Enter') send(); else setState('listening');
});
input.addEventListener('blur', ()=> setState('idle'));

function sleep(ms){ return new Promise(r=>setTimeout(r,ms)); }

// ────────────── Tiny rule-based bot ──────────────
function botReply(q){
  const t = q.toLowerCase();
  if(/hello|hi|hey/.test(t)) return 'Hey! I\'m PixelFace. Ask me something!';
  if(/name/.test(t)) return 'I\'m PixelFace — your tiny canvas buddy.';
  if(/help|what can you do/.test(t)) return 'I can chat a bit and make cute faces. For a real AI, connect a backend later.';
  if(/time/.test(t)) return 'Local time: ' + new Date().toLocaleTimeString();
  if(/joke/.test(t)) return 'Why do programmers prefer dark mode? Because light attracts bugs!';
  if(/github|project/.test(t)) return 'This is a minimal GitHub Pages project: HTML + CSS + JS only.';
  if(/pixel|face|avatar/.test(t)) return 'My eyes blink and my mouth moves when I speak!';
  return random([
    'Interesting! Tell me more.',
    'Got it. What else?',
    'Cool — what should we build next?',
    'I\'m just a tiny demo, but I\'m listening.'
  ]);
}
function random(a){ return a[Math.floor(Math.random()*a.length)]; }

// ────────────── Pixel face avatar ──────────────
let avatarState = 'idle';
function setState(s){ avatarState = s; stateEl.textContent = s; }
function clear(){ ctx.fillStyle = '#0a0e14'; ctx.fillRect(0,0,64,64); }
function roundedRect(x,y,w,h,r){ ctx.beginPath(); ctx.moveTo(x+r,y); ctx.lineTo(x+w-r,y); ctx.quadraticCurveTo(x+w,y,x+w,y+r); ctx.lineTo(x+w,y+h-r); ctx.quadraticCurveTo(x+w,y+h,x+w-r,y+h); ctx.lineTo(x+r,y+h); ctx.quadraticCurveTo(x,y+h,x,y+h-r); ctx.lineTo(x,y+r); ctx.quadraticCurveTo(x,y,x+r,y); ctx.closePath(); }
function head(){ ctx.fillStyle = '#2b3952'; roundedRect(8,10,48,44,4); ctx.fill(); ctx.fillStyle = '#e0c29a'; roundedRect(16,18,32,28,3); ctx.fill(); }
function eyes(open=true, y=0){ if(open){ ctx.fillStyle='#fff'; ctx.fillRect(24,29+y,6,4); ctx.fillRect(34,29+y,6,4); ctx.fillStyle='#111'; ctx.fillRect(27,30+y,2,2); ctx.fillRect(37,30+y,2,2); } else { ctx.fillStyle='#5b4b3a'; ctx.fillRect(24,31+y,6,2); ctx.fillRect(34,31+y,6,2);} }
function mouth(shape='neutral'){ if(shape==='talk'){ ctx.fillStyle='#7a1f2f'; ctx.fillRect(29,40,6,6);} else if(shape==='smile'){ ctx.fillStyle='#5b2d34'; ctx.fillRect(26,42,12,2); ctx.fillRect(26,41,2,1); ctx.fillRect(36,41,2,1);} else if(shape==='oh'){ ctx.fillStyle='#7a1f2f'; ctx.fillRect(31,41,4,4);} else { ctx.fillStyle='#3a2b2b'; ctx.fillRect(28,42,8,2);} }

function render(ts){
  clear(); head();
  const t = (ts||0)/1000; let open = true;
  if(avatarState!=='speaking'){ if(Math.floor(t)%3===0 && (t%3)<0.12) open=false; }
  const eyeY = avatarState==='thinking' ? ((Math.sin(t*4)>0)?1:0) : 0;
  eyes(open, eyeY);
  if(avatarState==='speaking'){ const frames=['oh','talk','smile','neutral']; mouth(frames[Math.floor(t*8)%frames.length]); } else if(avatarState==='error'){ mouth('oh'); } else if(avatarState==='listening'){ mouth('smile'); } else { mouth('neutral'); }
  requestAnimationFrame(render);
}
requestAnimationFrame(render);

// greet on load
addMsg("Hi, I\'m PixelFace! Try 'hi', 'time', or 'joke'.", 'bot');
